<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.board.individual.mapper.IndividualMapper">
  <!-- 로그인 -->
  <select id="login" >
	SELECT USER_ID, USERNAME, EMAIL, PASSWORD, PHONE_NUMBER, ADDRESS, J_DATE
	FROM   USERS
	WHERE  USER_ID  = #{param1,jdbcType=VARCHAR}
    AND    PASSWORD = #{param2,jdbcType=VARCHAR}
   </select>
   
  <!-- 마이페이지_회원정보 --> 
  <select id="getUserById" parameterType="String" resultType="com.board.individual.vo.IndividualVo">
    SELECT USER_ID, USERNAME, EMAIL, PASSWORD, PHONE_NUMBER, ADDRESS, J_DATE
    FROM   USERS
    WHERE  USER_ID = #{user_id}
  </select>
  
  <!-- 회원가입 -->
  <insert id="signup">
  	INSERT INTO USERS (
	    USER_ID,
	    USERNAME,
	    EMAIL,
	    PASSWORD,
	    PHONE_NUMBER,
	    ADDRESS
    ) VALUES (
        #{user_id, jdbcType=VARCHAR}, 
        #{username, jdbcType=VARCHAR}, 
        #{email, jdbcType=VARCHAR}, 
        #{password, jdbcType=VARCHAR}, 
        #{phone_number, jdbcType=VARCHAR}, 
        #{address, jdbcType=VARCHAR}
    )
  </insert>
  
  <!-- ID 중복 확인 쿼리 -->
  <select id="idDupCheck">
  	SELECT
	    USER_ID,
	    USERNAME,
	    EMAIL,
	    PASSWORD,
	    PHONE_NUMBER,
	    ADDRESS,
	    J_DATE
	FROM
    	USERS
    WHERE
    	USER_ID = #{user_id}
  </select>
  
  <!-- 이메일 중복 확인 쿼리 -->
  <select id="emailDupCheck">
	SELECT
  		EMAIL
	FROM
    	USERS
    WHERE
    	EMAIL = #{email}
  </select>
  
  <!-- 마이페이지_회원정보수정 -->
  <update id="update">
    UPDATE USERS
    SET    PASSWORD     = #{password},
           USERNAME     = #{username},
           EMAIL        = #{email},
           ADDRESS      = #{address},
           PHONE_NUMBER = #{phone_number}
    WHERE  USER_ID    = #{user_id}
  </update>
  
  <!-- 마이페이지_회원탈퇴 -->
  <delete id="delete">
    DELETE FROM USERS
    WHERE  USER_ID = #{user_id, jdbcType=VARCHAR}
  </delete>
  
  <!-- 이력서 등록 -->
  <insert id="insert">
  
  INSERT INTO RESUMES (   TITLE,   USER_ID,   USERNAME,  EMAIL,   PHONE_NUMBER,  ADDRESS,   BIRTH,   GENDER,   NUMBER2,   CAREER,   CAREERS,  EDUWHEN,   EDUWHER,  EDU,  MAJOR,  LICENSES1, 
  LICENSES2,   LICENSES3,  PUBLISHER1,    PUBLISHER2,   PUBLISHER3,  PASSDATE1,  PASSDATE2,  PASSDATE3,  SKILLS1,  SKILLS2, SKILLS3,  SKILLS4,  SKILLS5,  PORTFOLIO,  SELFINTRO
 ) VALUES ( 
  #{title } ,  #{user_id  },  #{username },  #{email  } ,  #{phone_number },  #{address  },   #{birth  },   #{gender   } ,   #{number2 } ,   #{career  } ,   #{careers  },  #{eduwhen } , 
  #{eduwhere} ,  #{edu },  #{major },  #{licenses1},   #{licenses2},   #{licenses3},  #{publisher1} ,    #{publisher2} ,    #{publisher3} ,   #{passdate1} ,    #{passdate2} ,   #{passdate3} ,  
  #{skills1}  ,    #{skills2}  ,  #{skills3} ,    #{skills4} ,    #{skills5} ,      #{portfolio} ,    #{selfintro}     )
  </insert>
  
  <!-- 개인 - 기업추천 --> <!-- 동기 수정됨 -->
	<select id="recommendList">
    SELECT 
        JP.* 
    FROM 
        JOBPOSTING JP
    JOIN 
        RESUMES RE ON RE.USER_ID = #{user_id} 
    WHERE 
        JP.LICENSES IS NOT NULL
    AND (
            RE.LICENSES1 IS NOT NULL AND JP.LICENSES = RE.LICENSES1
            OR RE.LICENSES2 IS NOT NULL AND JP.LICENSES = RE.LICENSES2
            OR RE.LICENSES3 IS NOT NULL AND JP.LICENSES = RE.LICENSES3
        )
    </select>
  	
   	<!-- title 가져오기-->
    <select id="getTitlesByUSerId" resultType="string" parameterType="string">
        SELECT TITLE 
        FROM RESUMES
        WHERE USER_ID = #{user_id}
    </select>
  
   	<!-- 입사 지원서 제출  -->
  	<insert id="insert2">
  	INSERT INTO APPLICATIONS (
    APP_ID,
    USER_ID,
    APLNUM,
    POST_ID,
    TITLE,
    LOCATION
	) VALUES (
 	(SELECT NVL(MAX(app_id),0)+1 FROM applications ),
    #{user_id2},
    #{aplnum},
    #{post_id},
    #{title},
    #{location}     
	)
  	</insert>
  
  	<!-- 제출한 이력서_목록 --> 
  	<select id="getappList" >
   	SELECT APP_ID, USER_ID, APLNUM, POST_ID, REPLACE(TITLE, ' ', '') AS TITLE, APP_DATE, PICTURE, LOCATION, RESULT
	FROM  APPLICATIONS 
	WHERE USER_ID = #{user_id}
	ORDER BY APP_ID ASC 
  	</select>
  
  	<!-- 등록한 이력서_목록 --> 
  	<select id="getreList" >
   	SELECT USERNAME, USER_ID, REPLACE(TITLE, ' ', '') AS TITLE, C_DATE, U_DATE
	FROM  RESUMES
	WHERE USER_ID = #{user_id}
	ORDER BY C_DATE ASC 
  	</select>
  

  	<!-- 이력서_상세페이지 -->
  	<select id="getresumeList">
    SELECT REPLACE(TITLE, ' ', '') AS TITLE, USER_ID, USERNAME, EMAIL, PHONE_NUMBER, ADDRESS, BIRTH, GENDER, NUMBER2, CAREER,
          CAREERS, EDUWHEN, EDUWHER, EDU, MAJOR, LICENSES1, LICENSES2, LICENSES3, PUBLISHER1,
          PUBLISHER2, PUBLISHER3, PASSDATE1, PASSDATE2, PASSDATE3, SKILLS1, SKILLS2, SKILLS3,
          SKILLS4, SKILLS5, PORTFOLIO, SELFINTRO
    FROM  RESUMES
    WHERE REPLACE(TITLE, ' ', '')= #{title}
  	</select>

  	<!-- 등록 이력서 수정  -->
	<update id="update2">
    UPDATE        RESUMES
    SET           
    GENDER =       #{gender} ,
    NUMBER2 =      #{number2 } ,
    CAREER =       #{career } ,
    CAREERS =      #{careers },
    EDUWHEN =      #{eduwhen} ,
    EDUWHER =      #{eduwher} ,
    EDU =   	   #{edu },
    MAJOR =        #{major },
    LICENSES1 =    #{licenses1},
    LICENSES2 =    #{licenses2}, 
    LICENSES3 =    #{licenses3},
    PUBLISHER1 =   #{publisher1} ,
    PUBLISHER2 =   #{publisher2} ,
    PUBLISHER3 =   #{publisher3} ,
    PASSDATE1 =    #{passdate1} ,
    PASSDATE2 =    #{passdate2} ,
    PASSDATE3 =    #{passdate3} ,
    SKILLS1 =      #{skills1}  , 
    SKILLS2 =      #{skills2}  ,
    SKILLS3 =      #{skills3} ,
    SKILLS4 =      #{skills4} ,
    SKILLS5 =      #{skills5} ,
    PORTFOLIO =    #{portfolio} ,
    SELFINTRO =    #{selfintro}
    WHERE        TITLE= #{title}
     AND         USER_ID=#{user_id}             
  </update>

	<delete id="deleteres">	
	DELETE FROM RESUMES
	WHERE   TITLE= #{title}
	</delete>
 
</mapper>

















